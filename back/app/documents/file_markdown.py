import os
import fitz  # PyMuPDF
import re
import unicodedata
from pathlib import Path
from typing import Optional

from langchain_core.documents import Document

# ‡∏£‡∏ß‡∏° metadata
def clean_markdown_and_thai_digits_all(documents: list[Document]) -> list[Document]:
    def thai_digit_to_arabic(text: str) -> str:
        return text.translate(str.maketrans("‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô", "0123456789"))

    def convert_metadata(metadata: dict) -> dict:
        new_metadata = {}
        for k, v in metadata.items():
            if isinstance(v, str):
                new_metadata[k] = thai_digit_to_arabic(v)
            else:
                new_metadata[k] = v  # ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á field ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà string
        return new_metadata

    cleaned_docs = []

    for doc in documents:
        cleaned_text = thai_digit_to_arabic(remove_markdown_headers(doc.page_content))
        cleaned_meta = convert_metadata(doc.metadata)
        cleaned_docs.append(Document(page_content=cleaned_text, metadata=cleaned_meta))

    return cleaned_docs

# ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° metadata
def clean_markdown_and_thai_digits(documents: list[Document]) -> list[Document]:
    cleaned_docs = []

    for doc in documents:
        text = remove_markdown_headers(doc.page_content)
        text = thai_digit_to_arabic(text)
        cleaned_docs.append(Document(page_content=text, metadata=doc.metadata))

    return cleaned_docs

def remove_markdown_headers(text: str) -> str:
    # ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ `#`, `##`, ..., `######` ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á #
    return re.sub(r'^#{1,6}\s*', '', text, flags=re.MULTILINE)

def read_markdown_file(file_path: str) -> str:
    path = Path(file_path)
    if not path.exists():
        print(f"‚ùó ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö: {file_path}")
        return ""
    try:
        return path.read_text(encoding="utf-8")
    except Exception as e:
        print(f"‚ùó ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return ""
    
def thai_digit_to_arabic(text: str) -> str:
    thai_to_arabic = str.maketrans("‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô", "0123456789")
    return text.translate(thai_to_arabic)

def thai_digit_to_int(thai_num: str) -> int:
    digit_map = {'‡πê': '0','‡πë': '1','‡πí': '2','‡πì': '3','‡πî': '4','‡πï': '5','‡πñ': '6','‡πó': '7','‡πò': '8','‡πô': '9'}
    return int(''.join(digit_map.get(ch, ch) for ch in thai_num))

def extract_matra_number(text: str) -> Optional[int]:
    m = re.match(r"^‡∏°‡∏≤‡∏ï‡∏£‡∏≤\s+([‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô\d]+)", clean_line(text))
    return thai_digit_to_int(m.group(1)) if m else None

def clean_line(text: str) -> str:
    text = unicodedata.normalize("NFKC", text)
    text = re.sub(r"[\u200B\u00A0\u202F]", " ", text)
    text = re.sub(r"\s+", " ", text).strip()
    return text

def is_matra_number_only_line(line: str) -> bool:
    line = clean_line(line)
    return bool(re.fullmatch(r"[‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô\d]{1,4}", line))

def extract_standalone_matra(line: str) -> str | None:
    """‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏°‡∏≤‡∏ï‡∏£‡∏≤ + ‡πÄ‡∏•‡∏Ç ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢"""
    line = clean_line(line)
    m = re.fullmatch(r"(‡∏°‡∏≤‡∏ï‡∏£‡∏≤\s+[‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô\d]+(?:/[‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô\d]+)?(?: ‡∏ó‡∏ß‡∏¥| ‡∏ï‡∏£‡∏µ| ‡∏à‡∏±‡∏ï‡∏ß‡∏≤)?)", line)
    return m.group(1) if m else None

def extract_matra_at_line_start(line: str) -> str | None:
    """‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î + ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢"""
    line = clean_line(line)
    m = re.match(r"^(‡∏°‡∏≤‡∏ï‡∏£‡∏≤\s+[‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô\d]+(?:/[‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô\d]+)?(?: ‡∏ó‡∏ß‡∏¥| ‡∏ï‡∏£‡∏µ| ‡∏à‡∏±‡∏ï‡∏ß‡∏≤)?)\b", line)
    return m.group(1) if m and len(m.group(0)) >= 7 else None

def detect_royal_gazette_header(lines: list[str]) -> Optional[int]:
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏£‡∏≤‡∏ä‡∏Å‡∏¥‡∏à‡∏à‡∏≤‡∏ô‡∏∏‡πÄ‡∏ö‡∏Å‡∏©‡∏≤ (‡∏´‡∏ô‡πâ‡∏≤ + ‡πÄ‡∏•‡πà‡∏° + ‡∏£‡∏≤‡∏ä‡∏Å‡∏¥‡∏à + ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
    ‡∏Ñ‡∏∑‡∏ô index ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (4 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î) ‡∏´‡∏≤‡∏Å‡πÄ‡∏à‡∏≠
    """
    page_line_pattern = r"^‡∏´‡∏ô‡πâ‡∏≤\s+[‡πê-‡πô\d]+$"
    header_pattern = r"""
    ^‡πÄ‡∏•‡πà‡∏°\s+[‡πê-‡πô\d]+\s+‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà\s+[‡πê-‡πô\d]+(?:\s+[‡∏Å-‡∏Æ])?\s+
    ‡∏£‡∏≤‡∏ä‡∏Å‡∏¥‡∏à‡∏à‡∏≤‡∏ô‡∏∏‡πÄ‡∏ö‡∏Å‡∏©‡∏≤\s+
    [‡πê-‡πô\d]+\s+[‡∏Å-‡πô]+\s+[‡πê-‡πô\d]{4}$
    """

    for i in range(len(lines) - 3):
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô "‡∏´‡∏ô‡πâ‡∏≤ ..."
        if re.fullmatch(page_line_pattern, lines[i].strip()):
            # ‡∏£‡∏ß‡∏° 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            combined = f"{lines[i+1].strip()} {lines[i+2].strip()} {lines[i+3].strip()}"
            if re.fullmatch(header_pattern, combined, flags=re.VERBOSE):
                return i  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà "‡∏´‡∏ô‡πâ‡∏≤ ..."

    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ "‡∏´‡∏ô‡πâ‡∏≤ ..." (‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)
    for i in range(len(lines) - 2):
        combined = f"{lines[i].strip()} {lines[i+1].strip()} {lines[i+2].strip()}"
        if re.fullmatch(header_pattern, combined, flags=re.VERBOSE):
            return i  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏£‡∏≤‡∏ä‡∏Å‡∏¥‡∏à‡∏Ø

    return None

def pdf_to_markdown(pdf_path: str, mark_type: str, output_dir: str = "extracted_md") -> str:
    doc = fitz.open(pdf_path)
    filename = os.path.splitext(os.path.basename(pdf_path))[0]
    md_path = os.path.join(output_dir, f"{filename}.md")
    os.makedirs(output_dir, exist_ok=True)

    buffer_line = None
    previous_matra = None
    first_line_mark_type = 0

    with open(md_path, "w", encoding="utf-8") as f:
        for page in doc:
            lines = page.get_text().splitlines()
            i = 0

            # üßπ ‡∏•‡∏ö‡∏´‡∏±‡∏ß‡∏£‡∏≤‡∏ä‡∏Å‡∏¥‡∏à‡∏à‡∏≤‡∏ô‡∏∏‡πÄ‡∏ö‡∏Å‡∏©‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ)
            header_index = detect_royal_gazette_header(lines)
            if header_index is not None:
                del lines[header_index:header_index + 4 if lines[header_index].startswith("‡∏´‡∏ô‡πâ‡∏≤") else header_index + 3]

            while i < len(lines):
                raw_line = lines[i]
                line = clean_line(raw_line)

                # if line.startswith("‡∏´‡∏ô‡πâ‡∏≤"):
                #     i += 1
                #     continue

                # markdown ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡∏ó‡∏≥‡πÅ‡∏Ñ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                if page.number == 0 and line.startswith(mark_type):
                    if (first_line_mark_type == 0):
                        f.write(f"# {mark_type}\n\n")
                        first_line_mark_type = 1
                        i += 1
                        continue

                # ‡∏£‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏î + ‡∏ä‡∏∑‡πà‡∏≠
                if buffer_line:
                    full = f"{buffer_line} {line}"
                    if buffer_line.startswith("‡∏´‡∏°‡∏ß‡∏î"):
                        f.write(f"## {full}\n\n")
                    elif buffer_line.startswith("‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà"):
                        f.write(f"### {full}\n\n")
                    buffer_line = None
                    i += 1
                    continue

                if re.fullmatch(r"‡∏´‡∏°‡∏ß‡∏î\s+[‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô\d]+", line):
                    buffer_line = line
                    i += 1
                    continue

                if line.startswith("‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà"):
                    buffer_line = line
                    i += 1
                    continue

                # ‚úÖ ‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏ô‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î: "‡∏°‡∏≤‡∏ï‡∏£‡∏≤", "‡πë"
                if line == "‡∏°‡∏≤‡∏ï‡∏£‡∏≤" and i + 1 < len(lines) and is_matra_number_only_line(lines[i + 1]):
                    full = f"‡∏°‡∏≤‡∏ï‡∏£‡∏≤ {clean_line(lines[i + 1])}"
                    number = extract_matra_number(full)
                    if previous_matra is None or (number == previous_matra + 1):
                        previous_matra = number
                        f.write(f"#### {full}\n\n")
                        i += 2
                        continue

                # # ‚úÖ ‡∏°‡∏≤‡∏ï‡∏£‡∏≤
                matra_text = extract_standalone_matra(line)
                if matra_text:
                    number = extract_matra_number(matra_text)
                    if previous_matra is None or (number == previous_matra + 1):
                        f.write(f"#### {matra_text}\n\n")
                        previous_matra = number
                        after = line[len(matra_text):].strip()
                        if after:
                            f.write(after + "\n\n")
                        i += 1
                        continue

                # ‚úÖ ‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢
                partial = extract_matra_at_line_start(line)
                if partial:
                    number = extract_matra_number(partial)
                    if previous_matra is None or (number == previous_matra + 1):
                        f.write(f"#### {partial}\n\n")
                        previous_matra = number
                        after = line[len(partial):].strip()
                        if after:
                            f.write(after + "\n\n")
                        i += 1
                        continue

                # ‚úÖ ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                if any(line.startswith(h) for h in ["‡∏ö‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏•", "‡∏ö‡∏ó‡∏ô‡∏¥‡∏¢‡∏≤‡∏°", "‡∏ö‡∏ó‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ó‡∏©"]):
                    f.write(f"## {line}\n\n")
                    i += 1
                    continue

                # ‚úÖ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                f.write(line + "\n\n")
                i += 1

    return md_path

def clean_markdown_file(md_path: str):
    with open(md_path, "r+", encoding="utf-8") as f:
        content = f.read()

        # üîπ 1. ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        content = re.sub(r"[ \t]+(\n)", r"\1", content)

        # üîπ 2. ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà space/tab
        content = re.sub(r"^[ \t]*\n", "\n", content, flags=re.MULTILINE)

        # üîπ 3. ‡∏•‡∏î \n ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà \n
        content = re.sub(r"\n{2,}", "\n", content)

        # ‚úèÔ∏è ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
        f.seek(0)
        f.write(content.strip())
        f.truncate()
        
# def law_markdown_transform(text: str, filename: str):
def law_markdown_transform(pdf_path: str, mark_type: str = "‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥", output_dir: str = "extracted_md") -> str:

    doc = fitz.open(pdf_path)
    filename = os.path.splitext(os.path.basename(pdf_path))[0]
    md_path = os.path.join(output_dir, f"{filename}.md")
    os.makedirs(output_dir, exist_ok=True)

    buffer_line = None
    previous_matra = None
    first_line_mark_type = 0

    with open(md_path, "w", encoding="utf-8") as f:
        for page in doc:
            lines = page.get_text().splitlines()
            i = 0

            # üßπ ‡∏•‡∏ö‡∏´‡∏±‡∏ß‡∏£‡∏≤‡∏ä‡∏Å‡∏¥‡∏à‡∏à‡∏≤‡∏ô‡∏∏‡πÄ‡∏ö‡∏Å‡∏©‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ)
            header_index = detect_royal_gazette_header(lines)
            if header_index is not None:
                del lines[header_index:header_index + 4 if lines[header_index].startswith("‡∏´‡∏ô‡πâ‡∏≤") else header_index + 3]

            while i < len(lines):
                raw_line = lines[i]
                line = clean_line(raw_line)

                # if line.startswith("‡∏´‡∏ô‡πâ‡∏≤"):
                #     i += 1
                #     continue

                # markdown ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡∏ó‡∏≥‡πÅ‡∏Ñ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                if page.number == 0 and line.startswith(mark_type):
                    if (first_line_mark_type == 0):
                        f.write(f"# {mark_type}\n\n")
                        first_line_mark_type = 1
                        i += 1
                        continue

                # ‡∏£‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏î + ‡∏ä‡∏∑‡πà‡∏≠
                if buffer_line:
                    full = f"{buffer_line} {line}"
                    if buffer_line.startswith("‡∏´‡∏°‡∏ß‡∏î"):
                        f.write(f"## {full}\n\n")
                    elif buffer_line.startswith("‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà"):
                        f.write(f"### {full}\n\n")
                    buffer_line = None
                    i += 1
                    continue

                if re.fullmatch(r"‡∏´‡∏°‡∏ß‡∏î\s+[‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô\d]+", line):
                    buffer_line = line
                    i += 1
                    continue

                if line.startswith("‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà"):
                    buffer_line = line
                    i += 1
                    continue

                # ‚úÖ ‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏ô‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î: "‡∏°‡∏≤‡∏ï‡∏£‡∏≤", "‡πë"
                if line == "‡∏°‡∏≤‡∏ï‡∏£‡∏≤" and i + 1 < len(lines) and is_matra_number_only_line(lines[i + 1]):
                    full = f"‡∏°‡∏≤‡∏ï‡∏£‡∏≤ {clean_line(lines[i + 1])}"
                    number = extract_matra_number(full)
                    if previous_matra is None or (number == previous_matra + 1):
                        previous_matra = number
                        f.write(f"#### {full}\n\n")
                        i += 2
                        continue

                # # ‚úÖ ‡∏°‡∏≤‡∏ï‡∏£‡∏≤
                matra_text = extract_standalone_matra(line)
                if matra_text:
                    number = extract_matra_number(matra_text)
                    if previous_matra is None or (number == previous_matra + 1):
                        f.write(f"#### {matra_text}\n\n")
                        previous_matra = number
                        after = line[len(matra_text):].strip()
                        if after:
                            f.write(after + "\n\n")
                        i += 1
                        continue

                # ‚úÖ ‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢
                partial = extract_matra_at_line_start(line)
                if partial:
                    number = extract_matra_number(partial)
                    if previous_matra is None or (number == previous_matra + 1):
                        f.write(f"#### {partial}\n\n")
                        previous_matra = number
                        after = line[len(partial):].strip()
                        if after:
                            f.write(after + "\n\n")
                        i += 1
                        continue

                # ‚úÖ ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                if any(line.startswith(h) for h in ["‡∏ö‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏•", "‡∏ö‡∏ó‡∏ô‡∏¥‡∏¢‡∏≤‡∏°", "‡∏ö‡∏ó‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ó‡∏©"]):
                    f.write(f"## {line}\n\n")
                    i += 1
                    continue

                # ‚úÖ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                f.write(line + "\n\n")
                i += 1

    clean_markdown_file(md_path)

    return md_path